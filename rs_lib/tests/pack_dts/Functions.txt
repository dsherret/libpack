# mod.ts
export function a(test: string): number {
  return 5;
}

export function b(test: string) {
  // no return statement
  console.log();
}

export function c(test?: string) {
  // return statement
  return 5;
}

export function d<const T extends 5>(): T {}

export function e(other = true) {
}

interface ExtrasObject {
  prop: string;
}

interface CreateOptions<T> {
  extras: T;
}

export function f<TExtras extends ExtrasObject = {}>(
  options: CreateOptions<TExtras> = {},
) {
}

export async function g() {
}

export async function h(): Promise<number> {
}
export async function i() {
  return 5;
}
export async function j() {
  return new NotExists();
}

# output.d.ts
export function a(test: string): number;
export function b(test: string): void;
export function c(test?: string): unknown;
export function d<const T extends 5>(): T;
export function e(other?: boolean): void;
interface ExtrasObject {
    prop: string;
}
interface CreateOptions<T> {
    extras: T;
}
export function f<TExtras extends ExtrasObject = {
}>(options?: CreateOptions<TExtras>): void;
export function g(): Promise<void>;
export function h(): Promise<number>;
export function i(): Promise<unknown>;
export function j(): Promise<unknown>;
