# mod.ts
const test: string = 5;

function test<T>(test: string): string {
  const test = <test>5 satisfies number as const;
  const asdf = obj!.test;
  f<x>, g<y>;
  return (test as 5) as string;
}

@decs<T>()
export class Test<T> implements Other extends Other2<T> {
  private a: string;
  protected b: string;
  public c: number;
  abstract d: number;
  readonly e: number;
  override f!: number;
  declare g: number;
  private #a: string;
  protected #b: string;
  public #c: number;
  readonly #e: number;
  override #f!: number;
  #g?: ResponseBody | ResponseBodyFunction;

  constructor(public a1: string, protected b1: number, private c1, readonly d1?: string, override e1: number = 2) {
    super();
  }
}

# output.js
const test = 5;
function test(test) {
  const test = 5;
  const asdf = obj.test;
  f, g;
  return test;
}
@decs()
export class Test extends Other2 {
  a1;
  b1;
  c1;
  d1;
  e1;
  a;
  b;
  c;
  e;
  f;
  #a;
  #b;
  #c;
  #e;
  #f;
  #g;
  constructor(a1, b1, c1, d1, e1 = 2){
    super();
    this.a1 = a1;
    this.b1 = b1;
    this.c1 = c1;
    this.d1 = d1;
    this.e1 = e1;
  }
}
