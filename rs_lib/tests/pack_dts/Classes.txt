# other.ts
export class Other {
  prop: string = "";
}

# mod.ts
import { Other } from "./other.ts";

class SomeClass {
}

class Dep {
  prop: string = "";
  other: Other = new Other();
}
const symbol: Symbol = Symbol("test");

// test
/**
 * My test class
 */
export class Test {
  prop?: string = "test";
  other = 2;
  // test
  private myPrivateProp!: string = 2;
  someDep: Dep = new Dep();

  constructor(public readonly text: string, public readonly explicit: string = false, public readonly otherProp = true, public a?: string) {
    5;
  }

  [symbol](): number {
    return 1;
  }

  method(value = true) {
    return 2;
  }

  protected test(): string {
  }

  private otherMethod(): number {
    return 2;
  }

  #test() {
    return 1;
  }

  bytes(options?: { copy?: boolean }): Uint8Array {
  }

  header(name: string): this;
  header(value: number): this;
  header() {
    return this;
  }

  #header(name: string): this;
  #header(value: number): this;
  #header() {
    return this;
  }

  /** @internal Should cause none of them to be shown */
  internalOnSignature(value: number): this;
  internalOnSignature(): InternalOnSignature {
    return this;
  }

  #test(value: number): this;
  #test(): InternalOnSignature {
    return this;
  }
}

export class OtherClass {
  constructor(value: string);
  constructor(value: number);
  constructor(value: string | number) {
  }
}

class InternalOnSignature {}

# output.d.ts
/**
 * My test class
 */ export class Test {
  #private;
  readonly text: string;
  readonly explicit: string;
  readonly otherProp: boolean;
  a?: string;
  prop?: string;
  other: number;
  private myPrivateProp;
  someDep: Dep;
  constructor(text: string, explicit?: string, otherProp?: boolean, a?: string);
  [symbol](): number;
  method(value?: boolean): unknown;
  protected test(): string;
  private otherMethod;
  bytes(options?: {
    copy?: boolean;
  }): Uint8Array;
  header(name: string): this;
  header(value: number): this;
}
export class OtherClass {
  constructor(value: string);
  constructor(value: number);
}
declare class Dep {
  prop: string;
  other: Other;
}
declare const symbol: Symbol;
declare class Other {
  prop: string;
}

# diagnostics
[
  {
    "kind": "missingReturnType",
    "specifier": "file:///mod.ts",
    "lineAndColumn": {
      "lineNumber": 31,
      "columnNumber": 3
    }
  }
]